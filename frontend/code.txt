ai recomendation.jsx



"use client";
import React, { useState } from "react";
import { useAuth } from "@/helper/auth";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Bot, Loader2, AlertCircle } from "lucide-react";
import { getFinancialAdvice } from "../helper/GetFinancialAdvice";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const recommendationTypes = [
  { key: "investment", label: "Investment Plan", hint: "Build long-term wealth using diversified assets." },
  { key: "tax", label: "Tax Saving", hint: "Explore tax benefits via PPF, ELSS, etc." },
  { key: "retirement", label: "Retirement Plan", hint: "Plan for retirement by age 60 with monthly targets." },
  { key: "budgeting", label: "Monthly Budgeting", hint: "Save more by cutting unnecessary expenses." },
];

export default function AIRecommendations() {
  const { LoggedInUserData } = useAuth();
  const [recommendationType, setRecommendationType] = useState("investment");
  const [aiAdvice, setAiAdvice] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const [monthlyExpense, setMonthlyExpense] = useState("");
  const [savings, setSavings] = useState("");
  const [investmentHorizon, setInvestmentHorizon] = useState("");
  const [financialGoal, setFinancialGoal] = useState("");
  const [riskTolerance, setriskTolerance] = useState("");

  const promptMap = {
    investment: `Return structured JSON array (max 3 items) with title, description, percentage, risk, priority for Indian investment plan. Example: [{title: "Emergency Fund", description: "...", percentage: "20%", risk: "Low", priority: "High"}]`,
    tax: `Return JSON array of tax-saving tips in India. Each with title, description, percentage, risk, priority.`,
    retirement: `Return structured JSON of short retirement tips in India. Each tip with title, description, percentage, risk, priority.`,
    budgeting: `Return JSON array of budgeting tips. Use title, description, percentage, risk, priority fields.`,
  };

  const fetchAdvice = async () => {
    if (!LoggedInUserData) return;
    setLoading(true);
    setError("");
    setAiAdvice([]);

    const result = await getFinancialAdvice({
      age: LoggedInUserData.age,
      annualIncome: LoggedInUserData.annualIncome,
      riskTolerance: riskTolerance,
      monthlyExpense: parseInt(monthlyExpense) || 0,
      savings: parseInt(savings) || 0,
      investmentHorizon: parseInt(investmentHorizon) || 0,
      financialGoal: financialGoal || "Wealth Growth",
      preferredAssets: "Mutual Funds, FD",
      apiKey: import.meta.env.VITE_GeminiAPI,
      customPrompt: promptMap[recommendationType],
    });

    try {
      const adviceArray = typeof result.advice === "string" ? JSON.parse(result.advice) : result.advice;
      if (Array.isArray(adviceArray)) {
        setAiAdvice(adviceArray);
      } else {
        throw new Error("Invalid format");
      }
    } catch (err) {
      setError("AI response parsing failed.");
    }

    setLoading(false);
  };

  if (!LoggedInUserData) {
    return (
      <Card className="animate-slide-up glass-effect">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bot className="w-5 h-5 text-blue-600" />
            AI Recommendations
          </CardTitle>
          <CardDescription>
            Complete your profile to receive personalized financial insights.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-gray-600 text-sm">Update age, income, expenses, etc. to unlock advice.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="animate-slide-up glass-effect">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bot className="w-5 h-5 text-blue-600" />
          AI Recommendations
        </CardTitle>
        <CardDescription>
          Income: ₹{LoggedInUserData.annualIncome.toLocaleString()} • Risk: {LoggedInUserData.riskTolerance}
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Type Selector */}
        <div className="grid grid-cols-2 gap-2">
          {recommendationTypes.map((type) => (
            <Button
              key={type.key}
              variant={recommendationType === type.key ? "default" : "outline"}
              onClick={() => setRecommendationType(type.key)}
              className="text-sm py-2"
            >
              {type.label}
            </Button>
          ))}
        </div>

        <p className="text-sm text-muted-foreground italic">
          {recommendationTypes.find(t => t.key === recommendationType)?.hint}
        </p>

        {/* Inputs */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          <Input
            type="number"
            placeholder="Monthly Expenses (₹)"
            value={monthlyExpense}
            onChange={(e) => setMonthlyExpense(e.target.value)}
          />
          <Input
            type="number"
            placeholder="Total Current Savings (₹)"
            value={savings}
            onChange={(e) => setSavings(e.target.value)}
          />
          <Input
            type="number"
            placeholder="Investment Horizon (years)"
            value={investmentHorizon}
            onChange={(e) => setInvestmentHorizon(e.target.value)}
          />
          <Input
            type="text"
            placeholder="Financial Goal (e.g., Buy a house)"
            value={financialGoal}
            onChange={(e) => setFinancialGoal(e.target.value)}
          />
          <div className="space-y-2">
            <Label htmlFor="riskTolerance">Investment Risk Profile</Label>
            <Select
              value={riskTolerance}
              onValueChange={(value) => setriskTolerance(value)}
            >
              <SelectTrigger className="transition-all duration-200 focus:scale-105">
                <SelectValue placeholder="Select your risk tolerance" />
              </SelectTrigger>
              <SelectContent className="bg-white">
                <SelectItem value="Low">
                  <div><div className="font-medium">Low</div></div>
                </SelectItem>
                <SelectItem value="Medium">
                  <div><div className="font-medium">Medium</div></div>
                </SelectItem>
                <SelectItem value="High">
                  <div><div className="font-medium">High</div></div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <Button
          onClick={fetchAdvice}
          disabled={loading}
          className="w-full gradient-bg text-white hover:scale-105 transition-all"
        >
          {loading ? (
            <span className="flex items-center gap-2">
              <Loader2 className="animate-spin w-4 h-4" />
              Generating...
            </span>
          ) : "Get Advice"}
        </Button>

        {/* Advice Cards */}
        <div className="mt-4 space-y-4">
          {error && (
            <div className="text-red-500 flex items-center gap-2 mb-2">
              <AlertCircle className="w-4 h-4" />
              {error}
            </div>
          )}
          {!loading && aiAdvice.length === 0 && !error && (
            <p className="text-gray-400">Fill the fields and click “Get Advice”.</p>
          )}
          {!loading && aiAdvice.length > 0 && (
            <div className="grid gap-4">
              {aiAdvice.map((item, index) => (
                <Card key={index} className="shadow border rounded-xl">
                  <CardHeader className="flex items-center justify-between">
                    <div className="text-lg font-semibold">{item.title}</div>
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      item.priority === "High"
                        ? "bg-green-100 text-green-700"
                        : "bg-yellow-100 text-yellow-700"
                    }`}>
                      {item.priority}
                    </span>
                  </CardHeader>
                  <CardContent className="space-y-2 text-sm text-gray-700">
                    <p>{item.description}</p>
                    <p className="text-green-600 font-medium">Recommended: {item.percentage} of income</p>
                    <div className="text-xs bg-gray-100 inline-block px-2 py-1 rounded">
                      Risk Level: {item.risk}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}






backend...............
/api/expense-summary.js (Express or Next.js API route)
js
Copy
Edit
// Next.js API route or Express backend
import connectMongo from "@/lib/mongodb"; // your DB connect utility
import Expense from "@/models/expense"; // your Mongoose model

export default async function handler(req, res) {
  try {
    const userId = req.query.userId;

    await connectMongo();

    const result = await Expense.aggregate([
      { $match: { userId } },
      { $group: {
          _id: "$category",
          total: { $sum: "$amount" }
        }
      }
    ]);

    res.status(200).json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to fetch expense summary" });
  }
}








npm install recharts





fornt end
"use client";
import React, { useEffect, useState } from "react";
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from "recharts";
import axios from "axios";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#8dd1e1", "#d0ed57", "#a4de6c"];

export default function ExpenseChart({ userId }) {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchSummary = async () => {
      const res = await axios.get(`/api/expense-summary?userId=${userId}`);
      const formatted = res.data.map(item => ({
        name: item._id,
        value: item.total
      }));
      setData(formatted);
    };
    fetchSummary();
  }, [userId]);

  const total = data.reduce((sum, d) => sum + d.value, 0);

  return (
    <div className="bg-white p-4 rounded-xl shadow-md w-full max-w-xl mx-auto">
      <h2 className="text-xl font-semibold text-center mb-4">Your Spending Breakdown</h2>
      <ResponsiveContainer width="100%" height={300}>
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            labelLine={false}
            outerRadius={100}
            fill="#8884d8"
            dataKey="value"
            label={({ name, value }) => `${name} (${((value / total) * 100).toFixed(1)}%)`}
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip formatter={(value) => `₹${value}`} />
          <Legend />
        </PieChart>
      </ResponsiveContainer>
      <p className="text-center mt-2 text-sm text-gray-500">Total Spent: ₹{total}</p>
    </div>
  );
}
